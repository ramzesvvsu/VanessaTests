//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюСправочник(Парам01)","ЯОчищаюСправочник","Когда я очищаю справочник ""омКандидаты""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюДокументы(Парам01)","ЯОчищаюДокументы","Когда я очищаю документы ""ПриемНаРаботу""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюВРегистреРесурсЗначением(Регистр,ИмяРесурса,ЗначениеРесурса)"
	,"ЯУстанавливаюВРегистреРесурсЗначением",
	"Когда Я устанавливаю в регистре ""НастройкиРасчетаЗарплатыРасширенный"" ресурс ""ИспользоватьОплатуКомандировок"" значением ""Истина""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда я очищаю справочник "омКандидаты"
//@ЯОчищаюСправочник(Парам01)
Процедура ЯОчищаюСправочник(ИмяСправочника) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
ЯОчищаюСправочникНаСервере(ИмяСправочника);

	
КонецПроцедуры

Процедура ЯОчищаюСправочникНаСервере(ИмяСправочника) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
УстановитьПривилегированныйРежим(Истина);
Выборка = Справочники[ИмяСправочника].Выбрать();
Пока Выборка.Следующий() Цикл
	
	_Об = Выборка.ПолучитьОбъект();
	_Об.ОбменДанными.Загрузка = Истина;
	_Об.Удалить();
	
КонецЦикла;
УстановитьПривилегированныйРежим(Ложь);

	
КонецПроцедуры

&НаКлиенте
//Когда я очищаю справочник "омКандидаты"
//@ЯОчищаюДокументы(Парам01)
Процедура ЯОчищаюДокументы(ИмяДокумента) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
ЯОчищаюДокументыНаСервере(ИмяДокумента);

	
КонецПроцедуры

Процедура ЯОчищаюДокументыНаСервере(ИмяДокумента) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
УстановитьПривилегированныйРежим(Истина);
Выборка = Документы[ИмяДокумента].Выбрать();
Пока Выборка.Следующий() Цикл
	
	_Об = Выборка.ПолучитьОбъект();
	_Об.ОбменДанными.Загрузка = Истина;
	
	Для Каждого ТекДвижение Из _Об.Движения Цикл
		
		ТекДвижение.Очистить();
		
		ТекДвижение.Записать();
		
	КонецЦикла;
	
	
	_Об.Удалить();
	
КонецЦикла;
УстановитьПривилегированныйРежим(Ложь);

	
КонецПроцедуры

Процедура ЯУстанавливаюВРегистреРесурсЗначением(Регистр,ИмяРесурса,ЗначениеРесурса) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
ЯУстанавливаюВРегистреРесурсЗначениемНаСервере(Регистр,ИмяРесурса,ЗначениеРесурса);

	
КонецПроцедуры

Процедура ЯУстанавливаюВРегистреРесурсЗначениемНаСервере(Регистр,ИмяРесурса,ЗначениеРесурса) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	Выборка = РегистрыСведений[Регистр].Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Не Выборка[ИмяРесурса] = Булево(ЗначениеРесурса) ТОгда
			МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи[ИмяРесурса] = Булево(ЗначениеРесурса);
			МенеджерЗаписи.Записать();
		КонецЕсли;
	Иначе
			МенеджерЗаписи = РегистрыСведений[Регистр].СоздатьМенеджерЗаписи();
			МенеджерЗаписи[ИмяРесурса] = Булево(ЗначениеРесурса);
			МенеджерЗаписи.Записать();
		
		
	КонецЕсли;
	

	
КонецПроцедуры


//окончание текста модуля